import random


# Задачи на кортежи
# 1.	Дан кортеж. Вывести все его совершенные числа. (6,2,7,8)
# 6 = 1 + 2 + 3
# 28 = 1 + 2 +4 + 7 +14
def check_num(n: int)-> bool:
    cheking_num = [i for i in range(1,n) if n % i == 0]
    return sum(cheking_num) == n

start , end = 1, 8
perfect_number =[]

for  number in range(start,end + 1):
    if check_num(number):
        perfect_number.append(number)

if perfect_number:
    print("Совершенные числа в заданном диапозоне:")
    for number in perfect_number:
        print(number)
else:
    print("В заданном диапозоне нет совершенных чисел")

# 2.	Дан кортеж. Написать программу, определяющую сколько раз менялся знак в кортеже. (5,2,-2,7,-8,-9,1) 4 раза
def task2_tuple():
    t = (5,2,-2,7,-8,9,1)
    symbol_changes = 0
    for i in range(len(t) -1):
        if (t[i]<0 and t[i + 1] >= 0 ) or (t[i] >= 0 and t [i + 1] < 0):
            symbol_changes += 1
    print(f"Количевтсво смен в кортеже: {symbol_changes}")
task2_tuple()

# Задачи на списки
# 3.	Задано два списка. Найти наименьшие среди элементов первого списка, которые не входят во второй список или вывести что такого элемента нет.
# [4,1,6,9]  [8,1,2,4,9,5,7,6] -> нет такого элемента
def min_numb():
    lst2 = [4, 1, 6, 9]
    lst1 = [8,1,2,4,9,5,7,6]
    set1 = set(lst1)
    set2 = set(lst2)

    result = sorted(list(set1 - set2))

    if result:
        print(f"Наименшие среди первого элемента , которые не входят во второй список:{result[0]}")
    else:
        print("Такого элемента нет")
min_numb()


# 4.	Дан список положительных целых чисел . Вставить после каждого чётного числа его перевёртыш. Например для чисел:
# 18 -> 81,
# 42 -> 24,
# 8 ->  8,
# 122 -> 221
def positive_and_negative_numb(q: int) -> int :
    reversed_num = 0
    while q > 0:
        digit = q % 10
        reversed_num = reversed_num * 10 + digit
        q //= 10
    return reversed_num


lst = [23,36,43,96,51,68]
result =[]

for number in lst:
    result.append(number)
    if number % 2 == 0:
        result.append(positive_and_negative_numb(number))

print(result)
# 5.	Дан список . Вычислить сколько раз в нем встречается каждый элемент, не используя сортировки. [5,2,4,5,1,2]
# 1 –> 1
# 2 –> 2
# 4 –> 1
# 5	–> 2
def counter_in_list():
    lst = [5, 2, 4, 5, 1, 2]
    counts = {}

    for i in lst:
        if i not in counts:
            counts[i] = 0
        counts[i] += 1

    for key, count in counts.items():
        print(f"{key} -> {count}")


counter_in_list()


# 6.	Дан список , преобразуйте его, вставив 0 между числами.
# [7 4 1]
# Sample Output:
# 7 0 4 0 1
def convert_list():
    lst = [7,4,1]
    result = []

    for i in range(len(lst)):
        result.append(lst[i])
        if i < len(lst) - 1:
            result.append(0)
    print(result)


convert_list()

# Задачи на множества
# 7.	Во входной строке записана последовательность чисел через пробел. Для каждого числа выведите слово YES (в отдельной строке), если это число ранее встречалось в последовательности
# или NO, если не встречалось.
def func_for_set():
    numbers = [1, 3, 4, 5 ,6 ,7 ,8, 3 , 4]
    unique_numbers = set()
    for number in numbers:
        if number in unique_numbers:
            print('YES')
        else:
            unique_numbers.add(number)
            print('NO')


func_for_set()

# 8.	Август и Беатриса играют в игру. Август загадал натуральное число от 1 до n. Беатриса пытается угадать это число, для этого она называет некоторые множества натуральных чисел.
# Август отвечает Беатрисе YES, если среди названных ей чисел есть задуманное или NO в противном случае. После нескольких заданных вопросов Беатриса запуталась в том, какие вопросы она
# задавала и какие ответы получила и просит вас помочь ей определить, какие числа мог задумать Август. В первой строке задано n - максимальное число, которое мог загадать Август.
# Далее каждая строка содержит вопрос Беатрисы (множество чисел, разделенных пробелом) и ответ Августа на этот вопрос .Вы должны вывести через пробел, в порядке возрастания, все числа,
# которые мог  задумать Август.
def guees_num():
    n = int(input("Enter n:"))
    rand_numb = random.randint(1,n)
    numbers = set()
    for i in range(1,n+1):
        numbers.add(i)


    while True:
        print(numbers)
        numb = set(map(int,input().split()))
        if rand_numb in numb:
            print("YES")
            numbers = numb.copy()
            if len(numbers) == 1:
                print(f"your number {rand_numb}")
        else:
            print("NO")
            numbers -= numb

# guees_num()







# Задачи на словари
# 9.	Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом к парному ему слову. Все слова в словаре различны. Для слова из словаря, записанного в последней строке,
# определите его синоним.
def first_task_dict():
    synonyms = {'привет': 'здравствуй',
                 'пока': 'до свидания',
                 'спасибо': 'благодарю',
                 'понимать': 'понимаю'
                 }

    word = "спасибо"
    synonym = synonyms[word]

    print(f"Синоним слова '{word}' - это '{synonym}'.")

first_task_dict()
# 10.	Коля устал запоминать телефонные номера и заказал у Вас программу, которая заменила бы ему телефонную книгу. Коля может послать программе два вида запросов: строку, содержащую
# имя контакта и его номер, разделенные пробелом, или просто имя контакта. В первом случае программа должна добавить в книгу новый номер, во втором – вывести номер контакта.
# Ввод происходит до символа точки. Если введенное имя уже содержится в списке контактов, необходимо перезаписать номер
# Sample Input:
# Ben 89001234050
# Alice 210-220
# Alice
# Alice 404-502
# Ben
# Nick
# Alice
# Robert 51234047129
# .
# Sample Output:
# 210-220
# 89001234050
# +4(908)273-22-42
# 404-502
def guide():
    phones = {}

    while True:

        phone = input()
        name_phone = phone.split()
        if len(name_phone) ==2:
            phones[name_phone[0]] = name_phone[1]
        else:
            print(phones[name_phone[0]])

        if phone == ".":
            break


guide()




# Дополнительные задания
# 1.	*Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). На вход программе передаётся неотрицательное
# целое число n — столько элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
# Sample Input:
# 7
# Sample Output:
# 1	2 2 3 3 3 4
# 2.	*Дан список . Перезаписать его так, чтобы сначала были все положительные числа, а затем все отрицательные и нули, сохраняя порядок их следования.
# [5,2,0,-2,-7,1,8,0,-1] -> [5,2,1,8,-2,-7,-1,0,0]
# 3.	*Дан список . Продублировать все неповторяющиеся элементы.
# [5,2,7,3,8,2,4,1,6,5] -> [5,2,7,7,3,3,8,8,2,4,4,1,1,6,6,5]
# 4.	*Римские цифры представлены семью различными символами:  I, V, X, L, C, D и M
#
# Символ        Значение
# I             1
# V             5
# X             10
# L             50
# C             100
# D             500
# M             1000
# Например,  2 пишется как II римскими цифрами, просто две сложенные вместе. 12 пишется как  XII, что просто X + II. Число 27 записывается как XXVII, то есть XX + V + II.
# Римские цифры обычно пишутся слева направо от большего к меньшему. Однако цифра «четыре» — не IIII. Вместо этого цифра четыре записывается как IV. Так как единица предшествует пятерке,
# мы вычитаем ее и получаем четыре. Тот же принцип применим к числу девять, которое записывается как IX. Есть шесть случаев, когда используется вычитание:
# I можно поставить перед V(5) и X(10), чтобы получилось 4 и 9.
# X можно поставить перед L(50) и C(100), чтобы получилось 40 и 90
# C можно поставить перед D(500) и M(1000), чтобы получить 400 и 900.
# Дана римская цифра, преобразовать ее в целое число.
# Sample Input 1:
# III
# Sample Output 1:
# 3
# Sample Input 2:
# LVIII
# Sample Output 2:
# 58
# Sample Input 2:
# MCMXCIV
# Sample Output 2:
# 1994