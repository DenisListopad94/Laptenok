import math



# 1.	Напишите функцию которая будет генерировать список из 10 чисел степени 2 от 1 до 10.
def first_gen():
    a = [i**2 for i in range(0,10)]
    print(a)


first_gen()
# 2.	Напишите функцию которая будет генерировать список всех трёхзначных чисел кратных 5 и 3.
def second_gen():
    a = [i for i in range(90,200) if i > 100 and i % 5 == 0 and i % 3 == 0]
    print(a)


second_gen()

# 3.	Программа получает на вход три числа через пробел — начало и конец диапазона, а также степень, в которую нужно возвести каждое число из диапазона.
# Напишите функцию которая сгенерирует и вернёт данный
# Sample Input:
# 5 12 3
# Sample Output:
# 125 216 343 512 729 1000 1331 1728
def third_gen(start,end,power):
    a = [i** power for i in range(start,end+1)]
    print(a)


third_gen(5,12,3)
# 4.	Напишите функцию, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей.
# Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например,
# если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).Если на вход пришло только одно число, надо вывести его же.
# Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.
# Sample Input 1:
# 1 3 5 6 10
# Sample Output 1:
# 13 6 9 15 7
# Sample Input 2:
# 10
# Sample Output 2:
# 10
def fourth_gen(lst):
    if len(lst) == 1:
        return lst
    else:
        return [lst[i - 1] + lst[(i + 1) % len(lst)] for i in range(len(lst))]


input_list = [1, 3, 5, 6, 10]
result = fourth_gen(input_list)
print(*result)

fourth_gen([])


# 5.	Напишите функцию, для нахождения минимального элемента из 2 чисел. С помощью данной функции найдите минимальное четырёх чисел.
def fifth_gen(a,b):
    if a < b:
        return a
    else:
        return b

def min_of_four(a,b,c,d):
    return fifth_gen(a,b),fifth_gen(c,d)

print(fifth_gen(4,6))
print(min_of_four(1,5,6,9))

# 6.	Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющую расстояние между точкой (x1, y1) и (x2, y2).
# Считайте четыре действительных числа и выведите результат работы этой функции.
def distanse(x1,y1,x2,y2):
    return math.sqrt((x2-x1)**2 + (y2-y1)**2)

result= distanse(1,2,4,6)
print(result)

# 7.	Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи. Ищем число Фиббоначи через цикл! Рекурсию не использовать!
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a,b = 0,1
        for i in range(2,n+1):
            c = a + b
            a,b = b,c
        return c


result = fib(6)
print(result)


# 8.	Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента целое число x и возвращающую самое маленькое целое число y, такое что:
# -y больше или равно x
# -y делится нацело на 5
# 10 - > 10
# 12,14,13 ->15
# Попробуйте решить без цикла!
def closet_mod_5(x: int) -> int:
    return x if x % 5 == 0 else x + 5 - x % 5


result = closet_mod_5(10)
print(result)


# 9.	Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два.
# Функция не должна ничего возвращать, требуется только изменение переданного списка.
def modify_list(l) -> list:
    i = 0
    while i < (len(l)):
        if not l[i] % 2 == 0:
            l.remove(l[i])
        else:
            l[i] //= 2
            i += 1
    return l
result = modify_list([1,2,3,4,5,6,7,8,9,10])
print(result)
# Дополнительные задачи

# 10.	*В языке Python есть некоторые ограничения на имена переменных. Имена переменных
# -могут состоять только из цифр, букв и знаков подчеркивания.
# -не могут начинаться с цифры.
# Программист вводит строки с именами переменных. Для каждой переменной нужно вывести "Можно использовать", если ее имя корректно, или "Нельзя использовать", если это не так.
# Определив все нужные переменные, программист заканчивает ввод строкой "Поработали, и хватит".
# Для проверки каждой строки используйте функцию check_variable(v). Для простоты будем считать, что программист использует только латинские буквы.
# Не может содержать : ! @ # $ % ^ & * ()
def right_name():
    enter_value = input("Enter your name variable:")
    exceptiongroup = "! @ # $ % ^ & * ()"
    some_list = [1,2,3,4,5,6,7,8,9]
    while True:
        if enter_value[0] in  exceptiongroup or  str(enter_value)[0] in map(str,some_list):
            print("Нельзя использовать")
        elif enter_value == "Поработали, и хватит":
            break
        else:
            print("Можно использовать")

        enter_value = input("Enter your name variable:")

right_name()
# 11.	*Сгенерировать список всех простых чисел до  100.
def all_just_num(c)-> int:
    list = []
    for i in range(2, c + 1):
        for j in range(2,i):
            if i % j ==0:
                break
        else:
            list.append(i)
    return list


result = all_just_num(100)
print(result)


