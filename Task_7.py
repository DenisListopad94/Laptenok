import time

# 1.	Создайте lambda-функцию для нахождения подстроки в введённой строке.
name_fun_1 = lambda string, substring: string.find(substring)
result =name_fun_1("Hello, world ", "world")
print(result)
# 2.	Проверьте число на чётность с помощью анонимной функции.
name_fun_2 = lambda x: x % 2 == 0
result = name_fun_2(32)
print(result)
# 3.	Напишите lambda-функцию, которая будет приветствовать пользователя имя которого введено корректно, с большой буква. Иначе будет выводить сообщение о неверно введённом имени.
name_fun_3 = lambda name: f"Привет user  {name}!" if name.istitle() else "Неверно введёно имя"
result = name_fun_3("peter")
print(result)
# 4.	Напишите рекурсивную функцию digits(n), которая принимает натуральное число и возвращает строку с цифрами этого числа справа налево, разделяя их пробелами.
# Sample Input:
# 14623
# Sample Output:
# 3 2 6 4 1
def digits(n):
    if n < 10:
        return str(n)
    else:
        return str(n%10) +" "+ digits(n // 10)

result = digits(10)
print(digits(235))
# 5.	Напишите рекурсивную функцию is_power(n), которая возвращает True, если переданное натуральное число является степенью двойки, и False иначе.
# Sample Input:
# 1048576
# Sample Output:
# True
def is_power(x):
    if x ==1:
        return True
    elif x % 2 != 0 or x ==0:
        return False
    else:
        return is_power(x//2)

result1 = is_power(1048576)
print(result1)


# 6.	Дано натуральное число N. Вычислите сумму его цифр
# Sample Input:
# 14623
# Sample Output:
# 16
def some_fun(n) -> int:
   return sum(int(digit) for digit in str(n))

n = 14623
print(some_fun(n))


# 7.	Дана функция, которая выводит все простые числа в промежутке от 1 до 100. Написать декоратор который будет проверять время работы этой функции. Задекорировать функцию. Вывести вpемя работы этой функции, а так же сами простые числа.
def measure_time(f):
    def wrapper(*args,**kwargs):
        start_time = time.time()
        result = f(*args,**kwargs)
        end_time = time.time()
        print(f"Время выполнения функции:{end_time - start_time} секунд.")
        return result
    return wrapper

@measure_time
def just_number(start,end):
    primes = []
    for num in range(start, end + 1 ):
        if num > 1:
            for i in range(2,num):
                if (num % i ) ==0:
                    break
                else:
                    primes.append(num)
    return set(primes)


primes = just_number(1,5)
print(f"Простые числа в промежутке от 1 до 100:{primes}")

# 8.	Дана функция, которая проверяет введённый пользователем пароль. Задекорировать её так, чтобы при правильно введённом пароле она приветствовала пользователя.

def check_pass_dec(func):
    def wrapper(password):
        if password == "1234":
            print("Welcome")
        else:
            func(password)
    return wrapper


@check_pass_dec
def input_password(password):
    print("Неверный пароль")


input_password("1234")
# Дополнительные задачи
# 9.	*Дано натуральное число n>1. Выведите все простые делители этого числа в порядке не убывания с учетом кратности. Используйте рекурсию!
# 18
# Sample Output:
# 2 3 3
# 10.	*Для переданного числа n выведите все перестановки чисел от 1 до n. Перестановками в математике называют все последовательности, полученные путем переупорядочивания элементов изначального набора. Например, для набора чисел 10, 11, 12 можно получить следующие перестановки:
# 10, 11, 12;    10, 12, 11;    11, 10, 12;    11, 12, 10;    12, 10, 11;    12, 11,10.
# Sample Input:
# 3
# Sample Output:
# 1 2 3
# 1 3 2
# 2 1 3
# 2 3 1
# 3 1 2
#   3 2 1
# 11.	*Сочетанием из n элементов по k называется подмножество этих n элементов размера k. Два сочетания называются различными, если одно из сочетаний содержит элемент,
# который не содержит другое. Числом сочетаний из n по k называется количество различных сочетаний из n по k. Обозначим это число за C(n, k).
# Пример: Пусть n = 3, т. е. есть три элемента (1, 2, 3). Пусть k = 2. Все различные сочетания из 3 элементов по 2: (1, 2), (1, 3), (2, 3).Различных сочетаний три, поэтому C(3, 2) = 3.
# Несложно понять, что C(n, 0) = 1, так как из n элементов выбрать 0 можно единственным образом, а именно, ничего не выбрать. Также несложно понять, что если k > n, то C(n, k) = 0,
# так как невозможно, например, из трех элементов выбрать пять. Для вычисления C(n, k) в других случаях используется следующая рекуррентная формула: C(n, k) = C(n - 1, k) + C(n - 1, k - 1).                             Реализуйте программу, которая для заданных n и k вычисляет C(n, k).
# Sample Input 1:
# 3 2
# Sample Output 1:
# 3
# Sample Input 2:
# 10 5
# Sample Output 2:
# 252
